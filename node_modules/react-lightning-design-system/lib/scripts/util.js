'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.setAssetRoot = setAssetRoot;
exports.getAssetRoot = getAssetRoot;
exports.registerStyle = registerStyle;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assetRoot = '/assets';

function setAssetRoot(path) {
  assetRoot = path;
}

function getAssetRoot() {
  return assetRoot;
}

function registerStyle(styleName, rules) {
  var styleId = 'react-slds-cssfix-' + styleName;
  var style = document.getElementById(styleId);
  if (style) {
    return;
  }
  style = document.createElement('style');
  style.id = styleId;
  style.appendChild(document.createTextNode(''));
  document.documentElement.appendChild(style);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(rules), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var ruleSet = _step.value;

      var declaration = ruleSet.pop();
      var selectors = ruleSet;
      selectors = selectors.concat(selectors.map(function (s) {
        return '.slds ' + s;
      }));
      var rule = selectors.join(', ') + ' ' + declaration;
      style.sheet.insertRule(rule, 0);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

exports.default = { setAssetRoot: setAssetRoot, getAssetRoot: getAssetRoot, registerStyle: registerStyle };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztRQUVnQjtRQUlBO1FBSUE7Ozs7QUFWaEIsSUFBSSxZQUFZLFNBQVo7O0FBRUcsU0FBUyxZQUFULENBQXNCLElBQXRCLEVBQTRCO0FBQ2pDLGNBQVksSUFBWixDQURpQztDQUE1Qjs7QUFJQSxTQUFTLFlBQVQsR0FBd0I7QUFDN0IsU0FBTyxTQUFQLENBRDZCO0NBQXhCOztBQUlBLFNBQVMsYUFBVCxDQUF1QixTQUF2QixFQUFrQyxLQUFsQyxFQUF5QztBQUM5QyxNQUFNLFVBQVUsdUJBQXVCLFNBQXZCLENBRDhCO0FBRTlDLE1BQUksUUFBUSxTQUFTLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBUixDQUYwQztBQUc5QyxNQUFJLEtBQUosRUFBVztBQUFFLFdBQUY7R0FBWDtBQUNBLFVBQVEsU0FBUyxhQUFULENBQXVCLE9BQXZCLENBQVIsQ0FKOEM7QUFLOUMsUUFBTSxFQUFOLEdBQVcsT0FBWCxDQUw4QztBQU05QyxRQUFNLFdBQU4sQ0FBa0IsU0FBUyxjQUFULENBQXdCLEVBQXhCLENBQWxCLEVBTjhDO0FBTzlDLFdBQVMsZUFBVCxDQUF5QixXQUF6QixDQUFxQyxLQUFyQyxFQVA4Qzs7Ozs7O0FBUTlDLG9EQUFzQixhQUF0QixvR0FBNkI7VUFBbEIsc0JBQWtCOztBQUMzQixVQUFNLGNBQWMsUUFBUSxHQUFSLEVBQWQsQ0FEcUI7QUFFM0IsVUFBSSxZQUFZLE9BQVosQ0FGdUI7QUFHM0Isa0JBQVksVUFBVSxNQUFWLENBQWlCLFVBQVUsR0FBVixDQUFjLFVBQUMsQ0FBRDtlQUFPLFdBQVcsQ0FBWDtPQUFQLENBQS9CLENBQVosQ0FIMkI7QUFJM0IsVUFBTSxPQUFPLFVBQVUsSUFBVixDQUFlLElBQWYsSUFBdUIsR0FBdkIsR0FBNkIsV0FBN0IsQ0FKYztBQUszQixZQUFNLEtBQU4sQ0FBWSxVQUFaLENBQXVCLElBQXZCLEVBQTZCLENBQTdCLEVBTDJCO0tBQTdCOzs7Ozs7Ozs7Ozs7OztHQVI4QztDQUF6Qzs7a0JBaUJRLEVBQUUsMEJBQUYsRUFBZ0IsMEJBQWhCLEVBQThCLDRCQUE5QiIsImZpbGUiOiJ1dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGFzc2V0Um9vdCA9ICcvYXNzZXRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEFzc2V0Um9vdChwYXRoKSB7XG4gIGFzc2V0Um9vdCA9IHBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBc3NldFJvb3QoKSB7XG4gIHJldHVybiBhc3NldFJvb3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclN0eWxlKHN0eWxlTmFtZSwgcnVsZXMpIHtcbiAgY29uc3Qgc3R5bGVJZCA9ICdyZWFjdC1zbGRzLWNzc2ZpeC0nICsgc3R5bGVOYW1lO1xuICBsZXQgc3R5bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdHlsZUlkKTtcbiAgaWYgKHN0eWxlKSB7IHJldHVybjsgfVxuICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLmlkID0gc3R5bGVJZDtcbiAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgZm9yIChjb25zdCBydWxlU2V0IG9mIHJ1bGVzKSB7XG4gICAgY29uc3QgZGVjbGFyYXRpb24gPSBydWxlU2V0LnBvcCgpO1xuICAgIGxldCBzZWxlY3RvcnMgPSBydWxlU2V0O1xuICAgIHNlbGVjdG9ycyA9IHNlbGVjdG9ycy5jb25jYXQoc2VsZWN0b3JzLm1hcCgocykgPT4gJy5zbGRzICcgKyBzKSk7XG4gICAgY29uc3QgcnVsZSA9IHNlbGVjdG9ycy5qb2luKCcsICcpICsgJyAnICsgZGVjbGFyYXRpb247XG4gICAgc3R5bGUuc2hlZXQuaW5zZXJ0UnVsZShydWxlLCAwKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IHNldEFzc2V0Um9vdCwgZ2V0QXNzZXRSb290LCByZWdpc3RlclN0eWxlIH07XG4iXX0=