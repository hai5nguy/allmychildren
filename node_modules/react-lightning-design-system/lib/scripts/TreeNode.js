'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _Spinner = require('./Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TreeNode = function (_React$Component) {
  (0, _inherits3.default)(TreeNode, _React$Component);

  function TreeNode(props) {
    (0, _classCallCheck3.default)(this, TreeNode);

    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TreeNode).call(this, props));

    _this.state = { opened: _this.props.defaultOpened };
    return _this;
  }

  // TODO: revert it babeljs bug https://phabricator.babeljs.io/T2892


  (0, _createClass3.default)(TreeNode, [{
    key: 'onToggleEvent',
    value: function onToggleEvent(e) {
      var _props = this.props;
      var onToggle = _props.onToggle;
      var onNodeToggle = _props.onNodeToggle;

      if (onToggle) {
        onToggle(e, this.props);
      }
      if (onNodeToggle) {
        onNodeToggle(e, this.props);
      }
      this.setState({ opened: !this.state.opened });
    }
  }, {
    key: 'onLabelClickEvent',
    value: function onLabelClickEvent(e) {
      var _props2 = this.props;
      var onLabelClick = _props2.onLabelClick;
      var onNodeLabelClick = _props2.onNodeLabelClick;

      if (onLabelClick) {
        onLabelClick(e, this.props);
      }
      if (onNodeLabelClick) {
        onNodeLabelClick(e, this.props);
      }
    }
  }, {
    key: 'onClickEvent',
    value: function onClickEvent(e) {
      var _props3 = this.props;
      var onClick = _props3.onClick;
      var onNodeClick = _props3.onNodeClick;
      var toggleOnNodeClick = _props3.toggleOnNodeClick;

      if (onClick) {
        onClick(e, this.props);
      }
      if (onNodeClick) {
        onNodeClick(e, this.props);
      }
      if (toggleOnNodeClick) {
        this.onToggleEvent(e);
      }
    }
  }, {
    key: 'renderTreeItem',
    value: function renderTreeItem(itemProps) {
      var className = itemProps.className;
      var label = itemProps.label;
      var _itemProps$icon = itemProps.icon;
      var icon = _itemProps$icon === undefined ? 'chevronright' : _itemProps$icon;
      var loading = itemProps.loading;
      var selected = itemProps.selected;
      var leaf = itemProps.leaf;
      var isOpened = itemProps.isOpened;
      var children = itemProps.children;
      var props = (0, _objectWithoutProperties3.default)(itemProps, ['className', 'label', 'icon', 'loading', 'selected', 'leaf', 'isOpened', 'children']);

      var itmClassNames = (0, _classnames2.default)(className, 'slds-tree__item', {
        'slds-is-open': isOpened,
        'slds-is-selected': selected
      });
      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({ className: itmClassNames, onClick: this.onClickEvent.bind(this) }, props),
        loading ? _react2.default.createElement(_Spinner2.default, { size: 'small' }) : !leaf ? _react2.default.createElement(_Button2.default, { className: 'slds-m-right--small',
          type: 'icon-bare',
          icon: icon,
          iconSize: 'small',
          onClick: this.onToggleEvent.bind(this)
        }) : null,
        _react2.default.createElement(
          'a',
          {
            className: 'slds-truncate',
            tabIndex: -1,
            role: 'presentation',
            onClick: this.onLabelClickEvent.bind(this)
          },
          label
        ),
        leaf ? children : null
      );
    }
  }, {
    key: 'renderChildNode',
    value: function renderChildNode(level, tnode) {
      var _props4 = this.props;
      var onNodeClick = _props4.onNodeClick;
      var onNodeToggle = _props4.onNodeToggle;
      var onNodeLabelClick = _props4.onNodeLabelClick;
      var toggleOnNodeClick = _props4.toggleOnNodeClick;

      return _react2.default.cloneElement(tnode, { level: level, onNodeClick: onNodeClick, onNodeToggle: onNodeToggle, onNodeLabelClick: onNodeLabelClick, toggleOnNodeClick: toggleOnNodeClick });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props;
      var defaultOpened = _props5.defaultOpened;
      var opened = _props5.opened;
      var leaf = _props5.leaf;
      var level = _props5.level;
      var onClick = _props5.onClick;
      var onToggle = _props5.onToggle;
      var onNodeClick = _props5.onNodeClick;
      var onNodeToggle = _props5.onNodeToggle;
      var onLabelClick = _props5.onLabelClick;
      var onNodeLabelClick = _props5.onNodeLabelClick;
      var toggleOnNodeClick = _props5.toggleOnNodeClick;
      var children = _props5.children;
      var props = (0, _objectWithoutProperties3.default)(_props5, ['defaultOpened', 'opened', 'leaf', 'level', 'onClick', 'onToggle', 'onNodeClick', 'onNodeToggle', 'onLabelClick', 'onNodeLabelClick', 'toggleOnNodeClick', 'children']);

      var isOpened = typeof opened !== 'undefined' ? opened : typeof this.state.opened !== 'undefined' ? this.state.opened : defaultOpened;
      var grpClassNames = (0, _classnames2.default)('slds-tree__group', {
        'slds-nested': !leaf,
        'is-expanded': isOpened,
        'slds-show': isOpened,
        'slds-hide': !isOpened
      });
      var itemProps = (0, _extends3.default)({ leaf: leaf, isOpened: isOpened, children: children }, props);
      if (leaf) {
        return this.renderTreeItem(itemProps);
      }

      return _react2.default.createElement(
        'li',
        { className: 'slds-tree__branch', role: 'treeitem', 'aria-level': level, 'aria-expanded': opened },
        this.renderTreeItem(itemProps),
        _react2.default.createElement(
          'ul',
          { className: grpClassNames, role: 'group' },
          _react2.default.Children.map(children, this.renderChildNode.bind(this, level + 1))
        )
      );
    }
  }]);
  return TreeNode;
}(_react2.default.Component);

exports.default = TreeNode;


TreeNode.propTypes = {
  className: _react.PropTypes.string,
  label: _react.PropTypes.string,
  onClick: _react.PropTypes.func,
  onToggle: _react.PropTypes.func,
  onNodeToggle: _react.PropTypes.func,
  onNodeLabelClick: _react.PropTypes.func,
  onLabelClick: _react.PropTypes.func,
  onNodeClick: _react.PropTypes.func,
  toggleOnNodeClick: _react.PropTypes.bool,
  defaultOpened: _react.PropTypes.bool,
  opened: _react.PropTypes.bool,
  leaf: _react.PropTypes.bool,
  level: _react.PropTypes.number,
  children: _react.PropTypes.node
};
//# sourceMappingURL=data:application/json;base64,